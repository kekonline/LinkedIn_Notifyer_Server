scalar DateTime

type JobListing {
    _id: ID!
    title: String!
    company: String!
    description: String!
    jobURL: String!
    applyURL: String
    searchTerms: [SearchTerm!]! # Related search terms (full objects)
    scrapeRetries: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
}

# type SearchTerm {
#     _id: ID!
#     term: String!
#     jobListings: [ID!]! # List of JobListing IDs
# }

type User {
    _id: ID!
    seenJobListings: [SeenJobListing!]! # List of seen job listings
}

type SeenJobListing {
    jobListing: ID! # JobListing ID (referenced)
    seen: Boolean
    starred: Boolean
}

type Query {
    getJobListings(page: String!): [JobListing!]! # Paginated list of job listings
    getJobListingById(jobId: ID!): JobListing # Retrieve a single job listing by ID
}

type Mutation {
    updateJobListingStatus(jobId: ID!, markAs: JobListingMarkAs!): String! # Update the status of a job listing
}

# Enum for allowed values of markAs
enum JobListingMarkAs {
    SEEN
    STARRED
}

# Input Types
input JobListingInput {
    title: String!
    company: String!
    description: String!
    jobURL: String!
    applyURL: String
    searchTerms: [ID!]! # Search term IDs to associate with the job listing
    scrapeRetries: Int
}
